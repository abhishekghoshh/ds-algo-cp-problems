{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#data-structure-and-algorithm-problems-and-solutions","title":"Data structure and Algorithm problems and solutions","text":""},{"location":"#my-programming-profiles","title":"My programming profiles","text":"<ul> <li>github</li> <li>leetcode</li> <li>algo.monster</li> </ul>"},{"location":"#projects","title":"Projects","text":"<ul> <li>billion row challenge in java</li> <li>Map reduce in java</li> </ul>"},{"location":"#data-structure-visualization","title":"Data structure visualization","text":"<ul> <li>visualgo.net</li> <li>Data Structure Visualizations</li> </ul>"},{"location":"#code-designing","title":"Code Designing","text":"<ul> <li>3 Smart Tactics Senior Devs Use to Cut Cognitive Load!</li> <li>complexity.json</li> </ul>"},{"location":"#introduction","title":"Introduction","text":"<p>Operations Per Second: Most competitive programming platforms allow approximately 10^8 operations per second. Some may allow 10^7 operations. Generally, if your algorithm's complexity results in operations exceeding 2^27 (which is approximately 134,217,728), it is likely to cause TLE in a 1-second time frame.</p>"},{"location":"#time-complexity-estimates","title":"Time Complexity Estimates:","text":"<ul> <li>O(1) : Acceptable for tiny inputs.</li> <li>O(logN) : Acceptable for inputs up to 10^9</li> <li>O(N) : Acceptable for N up to 10^8</li> <li>O(NlogN) : Acceptable for N up to 10^5</li> <li>O(N^2) : Acceptable for N up to 10^4</li> <li>O(N^3) : Acceptable for N up to 10^2</li> <li>O(2^N) and O(N!) : This is considered a relatively small value, and algorithms with a time complexity of O(2^N)   where (n \u2264 10) are often accepted.Generally not acceptable for any significant input size due to their rapid growth.</li> </ul> <p>Algorithm &amp; Data Structures and problems from leetcode, GFG, coding-ninjas ...</p>"},{"location":"arrays/","title":"arrays","text":""},{"location":"arrays/#arrays","title":"Arrays","text":""},{"location":"arrays/#youtube","title":"Youtube","text":"<ul> <li>Dynamic and Static Arrays</li> <li>Dynamic Array Code</li> </ul>"},{"location":"arrays/#prerequisites","title":"Prerequisites","text":"<ul> <li>Dynamic array</li> </ul>"},{"location":"arrays/#general","title":"General","text":"<ul> <li>Two Sum : Check if a pair with given sum exists in Array</li> <li>Two Sum II - Input Array Is Sorted</li> <li>3 Sum : Find triplets that add up to a zero</li> <li> <p>4 Sum / Find Quads that add up to a target value</p> </li> <li> <p>Contains Duplicate</p> </li> <li> <p>Contains Duplicate II</p> </li> <li> <p>Replace Elements with Greatest Element on Right Side</p> </li> <li> <p>Program to generate Pascal\u2019s Triangle</p> </li> <li>Program to generate Pascal\u2019s Triangle one row</li> <li> <p>Program to generate Pascal\u2019s Triangle one element</p> </li> <li> <p>Remove Element</p> </li> <li> <p>Majority Element I | Find the Majority Element that occurs more than N/2 times</p> </li> <li> <p>Majority Element II | Find the elements that appear more than N/3 times in the array</p> </li> <li> <p>Left Rotate an array by one place</p> </li> <li> <p>Rotate Array</p> </li> <li> <p>Shuffle the Array</p> </li> <li>Add to Array-Form of Integer</li> <li>Minimum Operations to Make Columns Strictly Increasing</li> <li>Can Place Flowers</li> <li>Next Greater Element for different array</li> <li>Find All Numbers Disappeared in an Array</li> <li>Maximum Number of Balloons</li> <li>Monotonic Array</li> <li>Number of Good Pairs</li> <li>Maximum Product Difference Between Two Pairs</li> <li>Minimum Changes To Make Alternating Binary String</li> <li>Intersection of Two Arrays</li> <li>Number of Students Unable to Eat Lunch</li> <li>Time Needed to Buy Tickets</li> <li>Special Array With X Elements Greater Than or Equal X</li> <li>Valid Sudoku</li> <li>Longest Consecutive Sequence in an Array</li> <li>Sort an array of 0's 1's and 2's</li> <li> <p>Minimum Number of Operations to Make Elements in Array Distinct</p> </li> <li> <p>Minimum Number of Swaps to Make The String Balanced</p> </li> <li>Number of Pairs of Interchangeable Rectangles</li> <li>Maximum Product of the Length of Two Palindromic Subsequences</li> <li>Grid Game</li> <li>Largest Number</li> <li>Insert Delete GetRandom O(1)</li> <li>Push Dominoes</li> <li>Non-decreasing Array</li> <li>Sign of the Product of an Array</li> <li>Find the Difference of Two Arrays</li> <li>Design Parking System</li> <li>Design Underground System</li> <li>Minimum Penalty for a Shop</li> <li>Champagne Tower</li> <li>Design a Food Rating System</li> <li>Minimum Number of Operations to Make Array Empty</li> <li>Divide Array Into Arrays With Max Difference</li> <li> <p>Sequential Digits</p> </li> <li> <p>Merge two Sorted Arrays Without Extra Space</p> </li> <li>Count inversions in an array</li> <li> <p>Count Reverse Pairs</p> </li> <li> <p>Car Fleet</p> </li> </ul>"},{"location":"arrays/#swap-sort","title":"Swap sort","text":"<ul> <li>Swap sort</li> <li>Find the repeating and missing numbers</li> <li>Find All Duplicates in an Array</li> </ul>"},{"location":"arrays/#bit-manipulation","title":"Bit Manipulation","text":"<ul> <li>Find the repeating and missing numbers</li> <li>Check If a String Contains All Binary Codes of Size K</li> </ul>"},{"location":"arrays/#hashing","title":"hashing","text":"<ul> <li>Convert an Array Into a 2D Array With Conditions</li> <li>Sort Matrix by Diagonals</li> </ul>"},{"location":"arrays/#prefix-sum","title":"Prefix Sum","text":"<ul> <li>Find Pivot Index</li> <li>Range Sum Query - Immutable</li> <li>Largest Substring Between Two Equal Characters</li> <li>Product of Array Except Self</li> <li> <p>Brick Wall</p> </li> <li> <p>Longest Subarray with given Sum K(Positives)</p> </li> <li>Longest Subarray with given Sum K with Positives and Negatives</li> <li>Longest Subarray with sum equals to Zero</li> <li>Longest Subarray xor equal to K</li> <li>Count of subarray sum equals K</li> <li>Count of subarray xor equal to K</li> <li> <p>Binary Subarrays With Sum</p> </li> <li> <p>Continuous Subarray Sum</p> </li> <li>Unique Length 3 Palindromic Subsequences</li> <li>Sum of Absolute Differences in a Sorted Array</li> <li>Contiguous Array</li> <li> <p>Find Polygon With the Largest Perimeter</p> </li> <li> <p>Range Sum Query 2D - Immutable</p> </li> <li>Longest Common Prefix Between Adjacent Strings After Removals</li> </ul>"},{"location":"arrays/#sliding-window","title":"Sliding window","text":"<ul> <li>Minimum Difference Between Highest and Lowest of K Scores</li> <li>Number of Zero-Filled Subarrays</li> <li>Optimal Partition of String</li> </ul>"},{"location":"arrays/#two-pointer","title":"Two pointer","text":"<ul> <li>Move Zeros to end</li> <li>Sort Array By Parity</li> <li>Remove Duplicates from Sorted Array</li> <li>Remove Duplicates from Sorted Array II</li> <li>Number of Subarrays of Size K and Average Greater than or Equal to Threshold</li> <li>Boats to Save People</li> <li>Rearrange Array Elements by Sign</li> <li>Bag of Tokens</li> <li>Minimum Length of String After Deleting Similar Ends</li> <li>Trapping Rainwater</li> <li>Transform Array to All Equal Elements</li> </ul>"},{"location":"arrays/#others","title":"Others","text":"<ul> <li>Minimum Pair Removal to Sort Array I</li> <li>Minimum Pair Removal to Sort Array II</li> <li>Implement Router</li> <li>Equal Sum Grid Partition I</li> <li>Count Special Triplets</li> </ul>"},{"location":"binary-search-tree/","title":"binary search tree","text":""},{"location":"binary-search-tree/#binary-search-tree","title":"Binary Search Tree","text":""},{"location":"binary-search-tree/#resources","title":"Resources","text":"<ul> <li>Binary Trees / Binary Search Trees / C++ / Java / Data Structures and Algorithms / Placements</li> <li>Binary Search Tree</li> <li>AVL tree</li> </ul>"},{"location":"binary-search-tree/#prerequisites","title":"Prerequisites","text":"<ul> <li>AVL Tree</li> <li>Red-Black Tree</li> <li>B Tree</li> <li>B+ Tree</li> </ul>"},{"location":"binary-search-tree/#general","title":"General","text":"<ul> <li>Introduction to Binary Search Trees</li> <li>Search in a Binary Search Tree</li> <li>Minimum Distance Between BST Nodes</li> <li>Minimum element in BST</li> <li>Maximum element in BST</li> <li>Ceil in a Binary Search Tree</li> <li>Floor in a Binary Search Tree</li> <li>Convert Sorted Array to Binary Search Tree</li> <li>Insert into a Binary Search Tree</li> <li>Delete a Node in Binary Search Tree</li> <li>Kth largest/smallest element in Binary Search Tree</li> <li>Validate Binary Search Tree</li> <li>Lowest Common Ancestor of a Binary Search Tree</li> <li>Construct Binary Search Tree from Preorder Traversal</li> <li>Inorder Successor/Predecessor in Binary Search Tree</li> <li>Convert a normal Binary Search Tree to Balanced Binary Search Tree</li> <li>Merge Two Binary Search Tree</li> <li>Binary Search Tree Iterator</li> <li>Two Sum In Binary Search Tree</li> <li>Recover Binary Search Tree / Correct Binary Search Tree with two nodes swapped</li> <li>Largest Binary Search Tree in Binary Tree</li> <li>Maximum Sum BST in Binary Tree</li> </ul>"},{"location":"binary-search/","title":"binary search","text":""},{"location":"binary-search/#binary-search","title":"Binary Search","text":""},{"location":"binary-search/#general","title":"General","text":"<ul> <li>Binary Search</li> <li>Binary Search in reverse sorted array</li> <li>Order not known binary search</li> <li>Lower Bound</li> <li>Upper Bound</li> <li>Search Insert Position</li> <li>Floor and Ceil in Sorted Array</li> <li>Next alphabetical element</li> <li>Find position in infinite sorted array</li> <li>Closest element in a sorted array</li> <li>First occurrence of 1 in an infinite sorted binary array</li> <li>Find the first or last occurrence of a given number in a sorted array</li> <li>Count Occurrences in Sorted Array</li> <li>Search in Rotated Sorted Array I</li> <li>Search in Rotated Sorted Array II</li> <li>Searching in nearly sorted array</li> <li>Find out how many times the sorted array has been rotated</li> <li>Minimum in Rotated Sorted Array</li> <li>Single Element in a Sorted Array</li> <li>Find peak element</li> <li>Find maximum in bitonic array</li> <li>Find in bitonic array</li> <li>Finding Integer Sqrt of a number</li> <li>Finding Fractional Square root of a number</li> <li>Nth Root of a Number</li> <li>Pow(x, n)</li> <li>Koko Eating Bananas</li> <li>Minimum Number of Days to Make m Bouquets</li> <li>Find the Smallest Divisor Given a Threshold</li> <li>Capacity To Ship Packages Within D Days</li> <li>Kth Missing Positive Number</li> <li>Aggressive Cows</li> <li>Allocate Minimum Number of Pages</li> <li>Split Array Largest Sum</li> <li>Painter's Partition Problem</li> <li>Minimize Max Distance to Gas Station</li> <li>Median of Two Sorted Arrays</li> <li>K-th Element of Two Sorted Arrays</li> <li>Count Negative Numbers in a Sorted Matrix</li> <li>Find the row with maximum number of 1</li> <li>Search in a sorted 2D matrix</li> <li>Search a 2D Matrix II</li> <li>Find a Peak Element II</li> <li>Median of Row Wise Sorted Matrix</li> </ul>"},{"location":"binary-tree/","title":"binary tree","text":""},{"location":"binary-tree/#binary-tree","title":"Binary Tree","text":""},{"location":"binary-tree/#resources","title":"resources","text":"<ul> <li>Binary Trees / Binary Search Trees / C++ / Java / Data Structures and Algorithms / Placements</li> </ul>"},{"location":"binary-tree/#prerequisites","title":"Prerequisites","text":"<ul> <li>Tree Node</li> <li>Binary Tree</li> <li>Binary Search Tree</li> <li>Splay Tree</li> </ul>"},{"location":"binary-tree/#general","title":"General","text":"<ul> <li>Introduction to binary tree</li> <li> <p>Maximum number Of Nodes in nth label in a binary tree</p> </li> <li> <p>Binary tree Traversal</p> </li> <li>Inorder Traversal</li> <li>Preorder Traversal</li> <li>Postorder Traversal</li> <li>Level wise order Traversal</li> <li>Preorder Inorder Postorder Traversals in One Traversal</li> <li>Zig Zag Traversal Of Binary Tree</li> <li> <p>Vertical Order Traversal of Binary Tree</p> </li> <li> <p>Binary Tree Paths</p> </li> <li>Height of a Binary Tree/Maximum Depth of Binary Tree</li> <li>Second minimum value in the binary tree</li> <li>Check if the Binary Tree is Balanced Binary Tree</li> <li>Diameter of a Binary Tree</li> <li>Path Sum</li> <li>Path Sum II</li> <li>Maximum Path Sum in Binary Tree from any node to any node</li> <li>Maximum Path Sum in Binary Tree from leaf to leaf</li> <li>Check if two trees are identical</li> <li>Invert/Flip Binary Tree (Create)</li> <li>Subtree of Another Tree</li> <li>Merge Two Binary Trees</li> <li>Range Sum of BST</li> <li>Leaf-Similar Trees</li> <li> <p>Evaluate Boolean Binary Tree</p> </li> <li> <p>Top view of a Binary Tree</p> </li> <li>Bottom view of a Binary Tree</li> <li>Left view of Binary Tree</li> <li> <p>Right view of Binary Tree</p> </li> <li> <p>Boundary Traversal of Binary Tree</p> </li> <li>Symmetric Tree</li> <li>Print Root to Node Path in a Binary Tree</li> <li>Lowest Common Ancestor of a Binary Tree</li> <li>Maximum Width of Binary Tree</li> <li>Children Sum Property in a Binary Tree</li> <li>Populating Next Right Pointers in Each Node</li> <li>Nodes at Distance K in a Binary Tree</li> <li>Minimum time taken to BURN the Binary Tree from a Node</li> <li> <p>Count Complete Tree Nodes in a Binary Tree</p> </li> <li> <p>Requirements needed to construct a Unique Binary Tree / Theory</p> </li> <li>Construct A Binary Tree from Inorder and Preorder Traversal</li> <li> <p>Construct Binary Tree from Inorder and PostOrder Traversal</p> </li> <li> <p>Serialize and deserialize Binary Tree</p> </li> <li>Morris Inorder Traversal of a Binary Tree</li> <li>Morris Preorder Traversal of a Binary Tree</li> <li>Flatten Binary Tree to LinkedList</li> </ul>"},{"location":"binary-tree/#others","title":"Others","text":"<ul> <li>Most Profitable Path in a Tree</li> </ul>"},{"location":"bit-manipulation/","title":"bit manipulation","text":""},{"location":"bit-manipulation/#bit-manipulation","title":"Bit Manipulation","text":""},{"location":"bit-manipulation/#resources","title":"Resources","text":"<ul> <li>L1 / Bit Manipulations / Raj (Striver) / Introduction to Bit Manipulations</li> <li>L2 / Bit Manipulations / Raj (Striver) / Problem Solving on Bit Manipulations</li> <li>Bit Manipulation by Scaler (2nd Half only)</li> </ul>"},{"location":"bit-manipulation/#general","title":"General","text":"<ul> <li>Introduction to Bit Manipulation</li> <li>Find the number that appears once, and the other numbers twice</li> <li>Negative of a Number</li> <li>Add Binary</li> <li>How many Bits are required to represent a number</li> <li>Swap two numbers</li> <li>XOR of 0 to n numbers</li> <li>L to R XOR</li> <li>Set Kth bit of a number</li> <li>Clear kth bit of a number</li> <li>Toggle kth bit of a number</li> <li>Check whether K-th bit is set or not</li> <li>Find nth magic number</li> <li>Minimum Bit Flips to Convert Number</li> <li>Check if a number is odd or not</li> <li>Remove the right most set bit</li> <li>Count the number of set bits</li> <li>Check if a number is power of 2 or not</li> <li>Good Number</li> <li>Number of Bit Changes to Make Two Integers Equal</li> <li>Extract the right most set bit</li> <li>Extract the left most set bit</li> <li>Find total set bit for range 0 to 2^n</li> <li>Count total set bits</li> <li>Reverse Bits</li> <li>Find the Difference</li> <li>Find missing number in an array</li> <li>Find two integers come once in an array/Two Numbers With Odd Occurrences</li> <li>XOR of every subset in a power set</li> <li>Petr and a Combination Lock</li> <li>Bit Set</li> <li>Set The Rightmost Unset Bit</li> <li>Divide Two Integers</li> <li>Addition without plus(+) operator</li> <li>Minimum XOR in an array</li> <li>Maximum XOR in an array</li> <li>Maximum XOR of two number</li> <li>Maximum XOR with an element from array</li> <li>Maximum XOR sum of two arrays </li> <li>Power of x to n</li> <li>Bitwise AND of Numbers Range</li> <li>Count Triplets That Can Form Two Arrays of Equal XOR</li> <li>Minimum Array End</li> </ul>"},{"location":"dynamic-programming/","title":"dynamic programming","text":""},{"location":"dynamic-programming/#dynamic-programming","title":"Dynamic Programming","text":""},{"location":"dynamic-programming/#resources","title":"Resources","text":"<ul> <li>Dynamic Programming - Learn to Solve Algorithmic Problems &amp; Coding Challenges</li> <li>Dynamic Programming Playlist / Coding / Interview Questions / Tutorials / Algorithm</li> <li>Dynamic Programming Playlist / Interview Questions / Recursion / Tabulation / Striver / C++ / Java / DSA / Placements</li> <li>Dynamic Programming</li> <li>Dynamic programming</li> <li>Dynamic Programming</li> <li>Dynamic Programming - Level 1</li> <li>Dynamic Programming - Level 2</li> <li>Complete Dynamic Programming By Rajneesh Kumar</li> </ul>"},{"location":"dynamic-programming/#introduction","title":"Introduction","text":"<ul> <li>Fibonacci series</li> <li>N-th Tribonacci Number</li> <li>Climbing stairs</li> <li>Min Cost Climbing Stairs</li> <li>Frog Jump</li> <li>Frog jump with K distances</li> <li>Maximum Sum of Non-Adjacent Elements / House Robber 1</li> <li>House robber 2</li> <li>Decode Ways</li> <li>Ninja's Training</li> <li>Grid Unique paths</li> <li>Grid Unique paths 2</li> <li>Minimum path Sum</li> <li>Minimum path sum in a triangle</li> <li>Minimum/Maximum Falling Path Sum | Variable Starting and Ending Points</li> <li>Delete and Earn</li> <li>Cherry Pickup 1</li> <li>Cherry Pickup 2</li> </ul>"},{"location":"dynamic-programming/#01-knapsack-problems","title":"0/1 Knapsack problems","text":"<ul> <li>Knapsack</li> <li>Print knapsack items</li> <li>Subset sum</li> <li>Equal sum partition</li> <li>Count of Subset sum</li> <li>Minimum Subset sum difference</li> <li>Target sum</li> <li>Count the number of subset with a given difference / Count partitions with Given Difference</li> </ul>"},{"location":"dynamic-programming/#unbounded-knapsack","title":"Unbounded Knapsack","text":"<ul> <li>Unbounded Knapsack</li> <li>Rod Cutting</li> <li>Maximum number of choices for a coin change</li> <li>Minimum number of coins for a coin change</li> </ul>"},{"location":"dynamic-programming/#longest-common-subsequence","title":"Longest common subsequence","text":"<ul> <li>Longest common subsequence</li> <li>Print Longest common subsequence</li> <li>Longest common substring</li> <li>Shortest common super sequence</li> <li>Minimum Number of Insertions and Deletion to convert String a to String b</li> <li>Longest Palindromic Subsequence</li> <li>Longest Palindromic Substring</li> <li>Longest Palindrome After Substring Concatenation II</li> <li>Count Palindromic Subsequences</li> <li>Palindromic Substrings</li> <li>Minimum number of deletions in a string to make it a palindrome</li> <li>Minimum number of insertions in a string to make it a palindrome</li> <li>Longest repeating subsequence</li> <li>Sequence Pattern Matching</li> <li>Distinct Subsequences</li> <li>Edit Distance</li> <li>Wildcard Matching</li> </ul>"},{"location":"dynamic-programming/#longest-increasing-subsequence","title":"Longest increasing subsequence","text":"<ul> <li>Longest Increasing Subsequence</li> <li>Printing Longest Increasing Subsequence</li> <li>Largest Divisible Subset</li> <li>Longest String Chain</li> <li>Longest Bitonic Subsequence</li> <li>Number of Longest Increasing Subsequences</li> <li>Maximum Total Damage With Spell Casting</li> <li>Max Sum Increasing Subsequence</li> <li>Max Sum Increasing Subsequence of length k</li> </ul>"},{"location":"dynamic-programming/#dp-on-stocks","title":"DP on stocks","text":"<ul> <li>Best Time to Buy and Sell Stock</li> <li>Best Time to Buy and Sell Stock 2</li> <li>Best Time to Buy and Sell Stock 3</li> <li>Best Time to Buy and Sell Stock 4</li> <li>Best Time to Buy and Sell Stock with Cooldown</li> <li>Best Time to Buy and Sell Stock with Transaction Fee</li> </ul>"},{"location":"dynamic-programming/#matrix-chain-multiplication","title":"Matrix chain multiplication","text":"<ul> <li>Matrix chain multiplication</li> <li>Minimum cost to Cut the Stick</li> <li>Bust Balloons</li> <li>Palindrome partitioning</li> <li>Partition Array for Maximum Sum</li> <li>Evaluate expression to True</li> <li>Scrambled String</li> <li>Egg dropping</li> </ul>"},{"location":"dynamic-programming/#dp-on-squares","title":"DP on squares","text":"<ul> <li>Maximal Rectangles in a Binary Matrix</li> <li>Count Square Sub matrices with All Ones</li> <li>Count Sub matrices With Equal Frequency of X and Y</li> </ul>"},{"location":"dynamic-programming/#others","title":"others","text":"<ul> <li>More subsequence</li> <li>Word Break</li> <li>Maximize Total Cost of Alternating Subarrays</li> <li>Minimum Cost for Cutting Cake I</li> <li>Sum of Good Subarrays</li> <li>Sum of Good Subsequences</li> <li>Count Paths With the Given XOR Value</li> <li>Champagne Tower</li> <li>Maximum Amount of Money Robot Can Earn</li> <li>Count Substrings Divisible By Last Digit</li> <li>Find X Value of Array I</li> <li>Maximum Product of Subsequences With an Alternating Sum Equal to K</li> <li>Inverse Coin Change</li> </ul>"},{"location":"fenwick-tree/","title":"fenwick tree/binary indexed tree","text":""},{"location":"fenwick-tree/#fenwick-treebinary-indexed-tree","title":"Fenwick tree/Binary Indexed Tree","text":""},{"location":"fenwick-tree/#resources","title":"Resources","text":"<ul> <li>sdnr1's blog</li> <li>Fenwick Tree/Binary indexed tree playlist</li> <li>Fenwick &amp; Segment Tree &amp; Sparse Table Playlist</li> <li>luv</li> <li>Binary Indexed Trees / Fenwick Trees made easy | Part 1</li> <li>Range Sum Query and Inversion Count Using BIT | Part 2</li> </ul>"},{"location":"fenwick-tree/#theory","title":"Theory","text":"<ul> <li>Prerequisites</li> <li>Fenwick tree</li> </ul>"},{"location":"fenwick-tree/#general","title":"General","text":"<ul> <li>Inversion count</li> <li>Count of Smaller Numbers After Self</li> <li>Distribute Elements Into Two Arrays II</li> <li>Block Placement Queries</li> <li>Find Subarray With Bitwise OR Closest to K</li> <li>Peaks in Array</li> </ul>"},{"location":"graph/","title":"graph","text":""},{"location":"graph/#graph","title":"Graph","text":""},{"location":"graph/#resources","title":"Resources","text":"<ul> <li>Graph Series by Striver / C++ / Java / Interview Centric / Algorithms / Problems</li> <li>Union Find / Disjoint Set</li> </ul>"},{"location":"graph/#prerequisites","title":"Prerequisites","text":"<ul> <li>Union find</li> </ul>"},{"location":"graph/#introduction-to-graph","title":"Introduction to graph","text":"<ul> <li>Introduction to Graph</li> <li>Clone Graph</li> <li>Breadth First Search (BFS): Level Order Traversal</li> <li>Depth First Search</li> <li>Graph valid tree</li> <li>Number of Provinces</li> <li>Number of Islands</li> <li>Flood Fill</li> <li>Rotting Oranges</li> <li>Detect Cycle in an Undirected Graph</li> <li>0/1 Matrix (Bfs Problem)</li> <li>Surrounded Regions (dfs)</li> <li>Number of Enclaves / flood fill implementation \u2014 multisource</li> <li>Number of Distinct Islands / dfs multisource</li> <li>Bipartite Graph</li> <li>Detect cycle in a directed graph (using DFS)</li> <li>Pacific Atlantic Water Flow</li> </ul>"},{"location":"graph/#topo-sort","title":"Topo Sort","text":"<ul> <li>Find Eventual Safe States</li> <li>Topological Sort Algorithm</li> <li>Kahn\u2019s Algorithm / Topological Sort Algorithm using BFS</li> <li>Cycle Detection in Directed Graph (BFS)</li> <li>Course Schedule I &amp; II</li> <li>Alien dictionary</li> </ul>"},{"location":"graph/#shortest-path-algorithms","title":"Shortest Path Algorithms","text":"<ul> <li>Shortest Path in Directed Acyclic Graph</li> <li>Shortest Path in Undirected Graph with Unit Weights</li> <li>Word Ladder 1</li> <li>Word Ladder 2</li> <li>Dijkstra's Algorithm</li> <li>Shortest Path in Weighted undirected graph using Dijkstra</li> <li>Shortest Distance in a Binary Maze</li> <li>Path With Minimum Effort</li> <li>Cheapest Flights Within K Stops</li> <li>Network Delay Time</li> <li>Minimum Multiplications to Reach End</li> <li>Number of Ways to Arrive at Destination</li> <li>Swim in Rising Water</li> <li>Bellman Ford</li> <li>Floyd Warshall</li> <li>Find the City With the Smallest Number of Neighbors at a Threshold Distance</li> <li>Minimize the Maximum Edge Weight of Graph</li> </ul>"},{"location":"graph/#minimum-spanning-tree","title":"Minimum Spanning Tree","text":"<ul> <li>Minimum Spanning Tree - Theory</li> <li>Prim's Algorithm\u2014Minimum Spanning Tree</li> <li>Disjoint Set | Union by Rank | Union by Size | Path Compression</li> <li>Kruskal's Algorithm - Minimum Spanning Tree</li> <li>Number of Provinces - Disjoint Set</li> <li>Number of Operations to Make Network Connected\u2014Using Disjoint Set</li> <li>Accounts Merge\u2014Using Disjoint Set</li> <li>Number of Islands - II - Online Queries\u2014Using Disjoint Set</li> <li>Making a Large Island - Disjoint Set</li> <li>Most Stones Removed with Same Row or Column</li> </ul>"},{"location":"graph/#other-algorithm","title":"Other Algorithm","text":"<ul> <li>Strongly Connected Components\u2014Kosaraju's Algorithm</li> <li>Bridges in Graph\u2014Using Tarjan's Algorithm of time in and low time</li> <li>Articulation Point in Graph</li> </ul>"},{"location":"graph/#others","title":"others","text":"<ul> <li>Count the Number of Houses at a Certain Distance I</li> <li>Frog Position After T Seconds</li> <li>Maximize the Number of Target Nodes After Connecting Trees I</li> <li>Maximize the Number of Target Nodes After Connecting Trees II</li> <li>Maximize Amount After Two Days of Conversions</li> <li>Properties Graph</li> <li>Power Grid Maintenance</li> </ul>"},{"location":"greedy/","title":"greedy","text":""},{"location":"greedy/#greedy","title":"Greedy","text":""},{"location":"greedy/#general","title":"General","text":"<ul> <li>Minimum Cost to Reach Every Position</li> <li>Assign Cookies</li> <li>Fractional Knapsack</li> <li>Find Minimum Number Of Coins</li> <li>Lemonade Change</li> <li>Valid Parenthesis String with escape character(*)</li> <li>N meetings in one room</li> <li>Meeting Rooms</li> <li>Meeting Rooms II</li> <li>Minimum number of platforms required for a railway</li> <li>Job Sequencing Problem</li> <li>Shortest Job First (or SJF) CPU Scheduling</li> <li>candy</li> <li>Insert Interval</li> <li>Non-overlapping Intervals</li> <li>Increasing Triplet Subsequence</li> <li>Minimum Number of Pushes to Type Word I</li> <li> <p>Minimum Number of Pushes to Type Word II</p> </li> <li> <p>Maximum Number of Distinct Elements After Operations</p> </li> <li>Non-decreasing Array</li> <li>Find the Lexicographically Largest String From the Box I</li> </ul>"},{"location":"hashing/","title":"hashing","text":""},{"location":"hashing/#hashing","title":"Hashing","text":""},{"location":"hashing/#youtube","title":"Youtube","text":"<ul> <li>hash-table</li> </ul>"},{"location":"hashing/#blogs","title":"Blogs","text":"<ul> <li>Hashing | Maps | Time Complexity | Collisions | Division Rule of Hashing | Strivers A2Z DSA Course</li> </ul>"},{"location":"hashing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Separate Chaining</li> <li>Open addressing</li> <li>Linear probing</li> </ul>"},{"location":"hashing/#hashing_1","title":"Hashing","text":"<ul> <li>Design HashSet</li> <li>Design HashMap</li> <li>Contains Duplicate</li> <li>Minimum Deletions for At Most K Distinct Characters</li> <li>Calculate Score After Performing Instructions</li> <li>Check if two Strings are anagrams of each other</li> <li>Two Sum : Check if a pair with given sum exists in Array</li> <li>Number of Good Pairs</li> <li>Destination City</li> <li>Path Crossing</li> <li>Redistribute Characters to Make All Strings Equal</li> <li>Largest Substring Between Two Equal Characters</li> <li>Find the repeating and missing numbers</li> <li>First Unique Character in a String</li> <li>Intersection of Two Arrays</li> <li>Valid Sudoku</li> <li>Longest Consecutive Sequence in an Array</li> <li>Sort an array of 0's 1's and 2's</li> <li>Encode and Decode TinyURL</li> <li>Brick Wall</li> <li>Unique Length 3 Palindromic Subsequences</li> <li>Minimum Number of Operations to Make Elements in Array Distinct</li> <li>First Missing Positive</li> <li> <p>Find the Difference of Two Arrays</p> </li> <li> <p>Frequencies of Limited Range Array Elements</p> </li> <li>Frequency of the Most Frequent Element</li> <li>Identify the Largest Outlier in an Array</li> </ul>"},{"location":"heap/","title":"heap/priority queue","text":""},{"location":"heap/#heap-priority-queue","title":"Heap/ Priority Queue","text":""},{"location":"heap/#resources","title":"Resources","text":"<ul> <li>Priority Queue</li> <li>HeapSort Analysis and Partitioning</li> </ul>"},{"location":"heap/#prerequisites","title":"Prerequisites","text":"<ul> <li>Min Heap</li> <li>Max heap</li> <li>Heap</li> </ul>"},{"location":"heap/#general","title":"General","text":"<ul> <li>Heap Example</li> <li>Implement a priority queue</li> <li> <p>Min Heap Implementation</p> </li> <li> <p>Convert Min Heap To Max Heap</p> </li> <li> <p>Last Stone Weight</p> </li> <li> <p>Kth Largest Element in an Array</p> </li> <li>Kth Smallest Element in an Array</li> <li>K largest Element in an Array</li> <li>Kth Largest Element in a Stream</li> <li>Sort K sorted array</li> <li>Merge M sorted Arrays</li> <li>Merge k Sorted Lists</li> <li>Replace elements by its rank in the array</li> <li>Task Scheduler Check it later</li> <li>Hands of Straights</li> <li>Design Twitter</li> <li> </li> <li>Maximum Sum Combination</li> <li>Find Median from Data Stream</li> <li>K most frequent elements</li> <li>Sort Array by Increasing Frequency</li> <li>Find K Closest Elements</li> <li>K Closest Points to Origin</li> <li>K-th Nearest Obstacle Queries</li> <li>Sum of elements between k1'th and k2'th smallest elements</li> <li>Find K Pairs with Smallest Sums</li> <li>Find Minimum Time to Reach Last Room I</li> <li> <p>Find Minimum Time to Reach Last Room II</p> </li> <li> <p>Choose K Elements With Maximum Sum</p> </li> </ul>"},{"location":"heap/#connect-n-ropes-with-minimum-cost","title":"Connect n ropes with minimum cost","text":""},{"location":"linked-list/","title":"linked list","text":""},{"location":"linked-list/#linked-list","title":"Linked List","text":""},{"location":"linked-list/#resources","title":"resources","text":"<ul> <li>Linked List / Beginner to Advanced for FAANG and PBC Interview Rounds</li> </ul>"},{"location":"linked-list/#prerequisites","title":"Prerequisites","text":"<ul> <li>Singly Int Node</li> <li>Doubly Int Node</li> <li>Linked List</li> <li>Doubly Linked List</li> </ul>"},{"location":"linked-list/#general","title":"General","text":"<ul> <li>Introduction To Linked List</li> <li>Inserting a node in LinkedList</li> <li>Deleting a node in LinkedList</li> <li>Delete Last Node of Linked List</li> <li>Find the Length of a Linked List</li> <li>Search an element in a Linked List</li> <li>Introduction To Doubly Linked List</li> <li>Insert at end of Doubly Linked List</li> <li>Delete Last Node of a Doubly Linked List</li> <li>Reverse A Doubly Linked List</li> <li> <p>Find middle element in a Linked List</p> </li> <li> <p>Reverse a Linked List</p> </li> <li> <p>Reverse Linked List II</p> </li> <li> <p>Swap Nodes in Pairs</p> </li> <li>Detect a loop in Linked List</li> <li>Find the starting point in Linked List</li> <li>Length of Loop in Linked List</li> <li>Check if Linked List is palindrome or not</li> <li>Remove Linked List Elements</li> <li>Remove Duplicates from Sorted List</li> <li>Remove duplicates from a sorted Doubly Linked List</li> <li> <p>Intersection of Two Linked Lists</p> </li> <li> <p>Segregate odd and even nodes in Linked List</p> </li> <li>Remove N-th node from the end of a Linked List</li> <li>Reorder List</li> <li> <p>Delete the middle node of Linked List</p> </li> <li> <p>Merge Two Sorted Linked Lists</p> </li> <li>Insertion Sort List Linked Lists</li> <li>Merge Sort on Linked Lists</li> <li>Sort Linked List</li> <li> </li> <li>Intersection of Two Linked Lists II</li> <li>Add 1 to a number represented by Linked List</li> <li>Add 2 numbers in Linked List</li> <li>Delete all occurrences of a given key in a doubly linked list</li> <li> <p>Find pairs with given sum in sorted doubly linked list</p> </li> <li> <p>Remove Duplicates from Sorted List II</p> </li> <li>Reverse Linked List in group of given size K</li> <li>Rotate a Linked List</li> <li>Flattening of Linked List</li> <li> <p>Clone Linked List with Random and Next Pointer</p> </li> <li> <p>Design Linked List</p> </li> <li>LRU Cache</li> <li>LFU Cache</li> </ul>"},{"location":"linked-list/#sort-linked-list-of-0s-1s-2s","title":"Sort linked list of 0s 1s 2s","text":""},{"location":"maths/","title":"math","text":""},{"location":"maths/#maths","title":"Maths","text":""},{"location":"maths/#regular-mathematics-problem","title":"Regular mathematics problem","text":"<ul> <li>Count Digits</li> <li>Reverse Integer</li> <li>Palindrome Number</li> <li>GCD Or HCF</li> <li>Armstrong Numbers</li> <li>Print all Divisors</li> <li>Sum of all divisors from 1 to n</li> <li>Check if the number is prime or not</li> </ul>"},{"location":"meet-in-the-middle/","title":"meet in the middle","text":""},{"location":"meet-in-the-middle/#meet-in-the-middle","title":"Meet in the middle","text":""},{"location":"meet-in-the-middle/#resources","title":"resources","text":"<ul> <li>Meet in the Middle / Tutorial &amp; Problems</li> <li>Meet In The Middle - I</li> <li>Meet In The Middle - II</li> </ul>"},{"location":"meet-in-the-middle/#general","title":"General","text":"<ul> <li>Zero sum exist in array for quadruple</li> <li>Find strictly increasing triplets</li> <li>Four sum</li> <li>Subset sum / Target sum / Knapsack</li> <li>Closest Subsequence Sum</li> <li>Partition Array Into Two Arrays to Minimize Sum Difference</li> </ul>"},{"location":"prerequisites/","title":"prerequisites","text":""},{"location":"prerequisites/#prerequisites","title":"Prerequisites","text":""},{"location":"prerequisites/#sorting","title":"Sorting","text":"<ul> <li>Swap sort</li> <li>Bubble sort</li> <li>Recursive Bubble sort</li> <li>Insertion sort</li> <li>Recursive Insertion sort</li> <li>Selection sort</li> <li>Quick sort</li> <li>Merge sort</li> <li>Count sort</li> <li>Radix sort</li> <li>Heap sort</li> </ul>"},{"location":"prerequisites/#logic-building","title":"logic building","text":"<ul> <li>Concatenation of Array</li> <li>Check if Two Chessboard Squares Have the Same Color</li> <li>Smallest Number With All Set Bits</li> </ul>"},{"location":"prime/","title":"prime","text":""},{"location":"prime/#prime","title":"Prime","text":""},{"location":"prime/#resources","title":"Resources","text":"<ul> <li>Prime numbers by striver / CodeBeyond</li> </ul>"},{"location":"prime/#general","title":"General","text":"<ul> <li>Check if the number is prime or not</li> <li>All divisors of a number</li> <li>Sum of all divisors from 1 to n</li> <li>Find three distinct numbers whose multiplication equals to n</li> <li>Sieve of Eratosthenes</li> <li>Prime count for the range 0 to N</li> <li>Kth prime number</li> <li>For a specific a range, find the count of N, such that N is the prime factor of the other number</li> <li>Prime factorization of given number</li> <li> <p>Segmented Sieve</p> </li> <li> <p>Assign Elements to Groups with Constraints</p> </li> </ul>"},{"location":"problem-series/","title":"problem series","text":""},{"location":"problem-series/#special-problems","title":"Special problems","text":""},{"location":"problem-series/#resources","title":"Resources","text":"<ul> <li>Jump Game Problems / Algorithms Made Easy</li> </ul>"},{"location":"problem-series/#jump-game","title":"Jump Game","text":"<ul> <li>Jump Game 1</li> <li>Jump Game 2</li> <li>Jump Game 3</li> <li>Jump Game 4</li> <li>Jump Game 5</li> <li>Jump Game 6</li> <li>Jump Game 7</li> <li>Frog Jump 1</li> <li>Frog Jump 2</li> </ul>"},{"location":"problem-series/#house-robber","title":"House Robber","text":"<ul> <li>[House Robber]</li> <li>[House Robber II]</li> <li>[House Robber III]</li> </ul>"},{"location":"problem-series/#stocks","title":"Stocks","text":"<ul> <li>Best Time to Buy and Sell Stock</li> <li>Best Time to Buy and Sell Stock 2</li> <li>Best Time to Buy and Sell Stock 3</li> <li>Best Time to Buy and Sell Stock 4</li> <li>Best Time to Buy and Sell Stock with Cooldown</li> <li>Best Time to Buy and Sell Stock with Transaction Fee</li> </ul>"},{"location":"problem-series/#resources_1","title":"Resources","text":"<ul> <li>Master Game Theory / Geeksforgeeks</li> <li>Game Theory - Level 3 / pepcoding</li> </ul>"},{"location":"problem-series/#stone-game","title":"Stone Game","text":"<ul> <li>[Stone game]</li> <li>[Stone game II]</li> <li>[Stone game III]</li> <li>[Stone game IV]</li> <li>[Stone game V]</li> <li>[Stone game VI]</li> <li>[Stone game VII]</li> <li>[Stone game VIII]</li> <li>[Stone game IX]</li> </ul>"},{"location":"queue/","title":"queue","text":""},{"location":"queue/#queue","title":"Queue","text":""},{"location":"queue/#resources","title":"Resources","text":"<ul> <li>Queue</li> </ul>"},{"location":"queue/#prerequisites","title":"Prerequisites","text":"<ul> <li>Array Queue</li> <li>Linked list queue</li> <li>Double Ended Queue</li> </ul>"},{"location":"queue/#general","title":"General","text":"<ul> <li>Implement Queue using Arrays</li> <li>Implement Queue using Stack</li> <li>Implement queue using Linkedlist</li> <li>Implement Deque using Linkedlist</li> <li>Sliding Window maximum</li> </ul>"},{"location":"recursion/","title":"recursion","text":""},{"location":"recursion/#recursion","title":"Recursion","text":""},{"location":"recursion/#resources","title":"Resources","text":"<ul> <li>Recursion (Basics to Advanced) and Backtracking Series</li> <li>Recursion Masterclass / Learn in Just 3 days / Raj (Striver)</li> <li>Recursion Playlist / Coding / Interview Questions / Algorithm / Tutorials</li> <li>Recursion</li> </ul>"},{"location":"recursion/#general","title":"General","text":"<ul> <li>Recursion theory</li> <li>Sum of All Subset XOR Totals</li> <li>Factorial</li> <li>Fibonacci</li> <li>Tower of hanoi</li> <li>Binary search recursively</li> <li>Reverse of an array</li> <li>String is palindrome or not</li> <li>Height of a binary tree/Max depth of a Binary tree</li> <li>Zigzag Grid Traversal With Skip</li> <li>Recursive Implementation of atoi()</li> <li>Pow(x, n)</li> <li>Count Good Numbers</li> <li>Sort an array</li> <li>Sort a stack using recursion</li> <li>Reverse a stack using recursion</li> <li>Delete the middle element of the stack</li> <li>Generate all binary strings with no consecutive 1s</li> <li>Generate Parentheses</li> <li>Print N-bit binary numbers having more 1s than 0s</li> <li>Subarrays with Sum k</li> <li> <p>Fill a Special Grid</p> </li> <li> <p>Print all subsequences/Power Set with unique elements</p> </li> <li> <p>Print all subsequences/Power Set with duplicate elements</p> </li> <li> <p>Combination sum 1</p> </li> <li>Combination sum 2</li> <li>Combination sum 2</li> <li> <p>Combination Sum 4</p> </li> <li> <p>Permutation with spaces</p> </li> <li>Letter case permutation</li> <li>Print all permutations of string or array</li> <li>Permutations II</li> <li> <p>Kth permutation sequence</p> </li> <li> <p>Subset sum</p> </li> <li>Count of Subset sum equal to k</li> <li>Print subset sum divisible by K</li> <li>Letter Combinations of a Phone Number</li> <li>Palindrome Partitioning</li> <li>Word Search 1</li> <li>Word Search 2</li> <li>N Queen problem</li> <li>Rat In a Maze</li> <li>M Coloring Problem</li> <li>Sudoku Solver</li> <li>K-th Symbol in Grammar</li> <li>Find Kth Bit in Nth Binary String</li> <li> <p>Expression Add Operators</p> </li> <li> <p>Largest number in K swaps</p> </li> <li>N Digit numbers with digits in increasing order</li> <li>Print all word breaks</li> <li>Josephus problem</li> <li>Parsing A Boolean Expression</li> <li>LRU Cache</li> <li>LFU Cache</li> </ul>"},{"location":"resources/","title":"resources","text":""},{"location":"resources/#resources","title":"Resources","text":""},{"location":"resources/#youtube-channels","title":"Youtube channels","text":"<ul> <li>take U forward</li> <li>NeetCode</li> <li>NeetCodeIO</li> <li>CodeBeyond</li> <li>Pepcoding</li> <li>Aryan Mittal</li> <li>Fraz</li> </ul>"},{"location":"resources/#blogs","title":"Blogs","text":"<ul> <li>LeetCode is a JOKE with This ONE WEIRD TRICK<ul> <li>Runtime Overview</li> </ul> </li> <li>LeetCode was HARD until I Learned these 15 Patterns<ul> <li>Resources I used to clear Amazon, Google and Microsoft Interviews</li> <li>LeetCode was HARD until I Learned these 15 Patterns</li> <li>20 Patterns to Master Dynamic Programming</li> </ul> </li> <li>You\u2019re ONE Flowchart Away From NEVER Struggling With LeetCode Again!<ul> <li>Flow chart for which algorithm to use for a problem</li> </ul> </li> <li>100 Days of DSA</li> <li>3 Months DSA Roadmap</li> <li>Master Roadmap</li> <li>coding-ninjas</li> </ul>"},{"location":"resources/#video-courses","title":"Video courses","text":"<ul> <li>Infix Postfix and Prefix Expressions</li> <li>The hidden beauty of the \"A*\" algorithm</li> <li>How Do You Calculate a Minimum Spanning Tree?</li> <li>How Dijkstra's Algorithm Works</li> <li>Understanding B-Trees: The Data Structure Behind Modern Databases</li> <li>Fibonacci Heaps or \"How to invent an extremely clever data structure\"</li> <li>Faster than Rust and C++: the PERFECT hash table</li> <li> <p>Data Compression</p> </li> <li> <p>william-fiset</p> </li> <li>Data structures playlist</li> <li> <p>Graph Theory Playlist</p> </li> <li> <p>Coursera</p> </li> <li>Algorithms, Part I</li> <li>Algorithms, Part II</li> <li>Algorithms Specialization<ul> <li>Divide and Conquer, Sorting and Searching, and Randomized Algorithms</li> <li>Graph Search, Shortest Paths, and Data Structures</li> <li>Greedy Algorithms, Minimum Spanning Trees, and Dynamic Programming</li> <li>Shortest Paths Revisited, NP-Complete Problems and What To Do About Them</li> </ul> </li> <li>Java Programming: Principles of Software Design</li> <li> <p>Distributed Programming in Java</p> </li> <li> <p>google</p> </li> <li>Tech Dev Guide</li> </ul>"},{"location":"resources/#pdf","title":"PDF","text":"<ul> <li>Cracking the Coding Interview</li> <li>Data Structures And Algorithms Made Easy In JAVA</li> <li>Data Structures And Algorithms Made Easy</li> <li>Introduction to Algorithms fourth edition by Cormen</li> <li>Computer Algorithms by Horowitz and Sahani</li> </ul>"},{"location":"resources/#a-z-dsa-sheets","title":"A-Z DSA sheets","text":"<ul> <li>Strivers A2Z DSA Course/Sheet</li> <li>neetcode.io</li> <li>Unlock your path to success by mastering DSA!</li> <li>Leetcode DSA sheet by Fraz</li> <li>Questions by Love Babbar</li> <li>Techdose-101</li> <li>AlgoPrep's 151 Problems Sheet</li> <li>DSA Sheet Final / AlgoPrep</li> <li>zerotrac.github.io</li> <li>Coding Ninja</li> <li>Interview prep with curated problems list</li> <li>interview bundle</li> <li>Online Mock Test Series</li> <li>Leetcode study plan</li> <li>Leetcode explore</li> <li>AlgoPrep's 151 Problems Sheet</li> <li>GeekForGeeks</li> <li>Microsoft SDE Preparation Test Series</li> <li>Amazon SDE Preparation Test Series</li> <li>SDE Sheet</li> <li>Beginner's DSA Sheet</li> <li>Love Babbar Sheet</li> <li>Top 50 Array Problems</li> <li>Top 50 String Problems</li> <li>Top 50 DP Problems</li> <li>Top 50 Graph Problems</li> <li>Top 50 Tree Problems</li> </ul>"},{"location":"segment-tree/","title":"segment tree","text":""},{"location":"segment-tree/#segment-tree","title":"Segment Tree","text":""},{"location":"segment-tree/#resources","title":"Resources","text":"<ul> <li>Masterclass: Range Query DS / Segment Trees / Fenwick Trees / Masterclasses By Striver / CodeBeyond</li> <li>Marathon Class on Range Query DS - 2 / Segment Trees / Fenwick Trees / Masterclasses By Striver) / CodeBeyond</li> <li>Segment Tree - Level 3</li> </ul>"},{"location":"segment-tree/#general","title":"general","text":"<ul> <li>Range minimum - Segment tree</li> <li>Range maximum - Segment tree</li> <li>Range Sum - Segment tree</li> <li>Xenia and Bit Operations</li> <li>Sereja and the balanced Brackets</li> <li>Inversion count</li> <li>Inversion count with negative integers</li> </ul>"},{"location":"segment-tree/#lazy-propagation","title":"lazy propagation","text":"<ul> <li>Range update and sum query in an array - Lazy Propagation in Segment tree</li> <li>Range update and min query in an array - Lazy Propagation in Segment tree</li> <li>Flip coins in a Range</li> </ul>"},{"location":"segment-tree/#others","title":"Others","text":"<ul> <li>Find X Value of Array II</li> </ul>"},{"location":"sliding-window/","title":"sliding window","text":""},{"location":"sliding-window/#sliding-window","title":"sliding-window","text":"<ul> <li>codes</li> <li>Maximum Sum Subarray of size K</li> <li>First Negative Number in every Window of Size K</li> <li>Count Occurrences Of Anagrams</li> <li>Maximum of all subarrays of size k</li> <li>Longest Substring With K Unique Characters / Variable Size Sliding Window</li> <li>Longest Substring With Without Repeating Characters / Variable Size Sliding Window</li> <li>Fruit Into Baskets / Pick Toys / An Interesting Sliding Window Problem</li> <li>Minimum Number of Flips to Make the Binary String Alternating</li> <li>Maximum Number of Vowels in a Substring of Given Length</li> <li>Minimum Window Substring / Variable Size Sliding Window</li> <li>Minimum Window Subsequence</li> <li> <p>Maximum Sum of Distinct Subarrays With Length K</p> </li> <li> <p>Subarrays with at most K Different Integers</p> </li> <li>Subarrays with exactly K Different Integers</li> <li> <p>Binary Subarrays With Sum</p> </li> <li> <p>Number of Substrings Containing All Three Characters</p> </li> <li>Max Consecutive Ones III</li> <li>Longest Repeating Character Replacement</li> <li> <p>Permutation in String</p> </li> <li> <p>Count Number of Nice Subarrays</p> </li> <li>Maximum Points You Can Obtain from Cards</li> <li>Container With Most Water</li> <li>Frequency of the Most Frequent Element</li> <li>Count Distinct Elements In Every Window</li> <li>Count Substrings With K-Frequency Characters I</li> <li> <p>Minimum Size Subarray Sum</p> </li> <li> <p>Maximum Subarray With Equal Products</p> </li> <li>Find Mirror Score of a String</li> <li>Maximum Coins From K Consecutive Bags</li> </ul>"},{"location":"stack/","title":"stack","text":""},{"location":"stack/#stack","title":"Stack","text":""},{"location":"stack/#resources","title":"Resources","text":"<ul> <li>Stack</li> </ul>"},{"location":"stack/#prerequisites","title":"Prerequisites","text":"<ul> <li>Array Stack</li> <li>Linked list Stack</li> </ul>"},{"location":"stack/#general","title":"General","text":"<ul> <li>Implement Stack using Arrays</li> <li>Implement Stack using Queue</li> <li>Implement stack using Linkedlist</li> <li>Implement Queue using Stack</li> <li> <p>Implement Min Stack</p> </li> <li> <p>Valid Parentheses</p> </li> <li>Longest Valid Parentheses</li> <li>Baseball Game</li> <li> <p>Make The String Great</p> </li> <li> <p>Infix to Postfix</p> </li> <li>Postfix to Infix</li> <li>Infix To Prefix</li> <li>Prefix to Infix</li> <li>Prefix to Postfix</li> <li>Postfix to Prefix</li> <li> <p>Evaluate Reverse Polish Notation</p> </li> <li> <p>Next Greater Element</p> </li> <li>Next Greater Element for different array</li> <li>Next Greater Element in a Circle</li> <li>Number of Greater Elements to the right</li> <li>Next Smaller Element</li> <li>Previous Greater Element</li> <li>Previous Smaller Element</li> <li>Daily Temperatures</li> <li>Stock span problem</li> <li>Remove K Digits</li> <li> <p>Make Array Non-decreasing</p> </li> <li> <p>Largest rectangle in a histogram</p> </li> <li>Sum of subarray minimum</li> <li>Sum of subarray maximum</li> <li>Sum of Subarray Ranges</li> <li> <p>Trapping Rainwater</p> </li> <li> <p>Asteroid Collision</p> </li> <li>Maximal Rectangles in a Binary Matrix</li> <li>Sliding Window maximum</li> <li>The Celebrity Problem</li> </ul>"},{"location":"strings/","title":"strings","text":""},{"location":"strings/#string","title":"String","text":""},{"location":"strings/#general","title":"General","text":"<ul> <li>Is Subsequence</li> <li>Length of Last Word</li> <li>Generate Tag for Video Caption</li> <li>Word Pattern</li> <li>Find Words That Can Be Formed by Characters</li> <li>Largest 3-Same-Digit Number in String</li> <li>Destination City</li> <li>Maximum Score After Splitting a String</li> <li>Minimum Changes To Make Alternating Binary String</li> <li>Redistribute Characters to Make All Strings Equal</li> <li>First Unique Character in a String</li> <li>Merge Strings Alternately</li> <li>Backspace String Compare</li> <li> <p>Check If Two String Arrays are Equivalent</p> </li> <li> <p>Encode and Decode TinyURL</p> </li> <li>Encode and Decode Strings</li> <li>Decode String</li> <li>Unique Length 3 Palindromic Subsequences</li> <li>Compare version number</li> <li> <p>Remove Outermost Parentheses</p> </li> <li> <p>Reverse String</p> </li> <li>Reverse Words in a String</li> <li> <p>Reverse Words in a String III</p> </li> <li> <p>Largest Odd Number in String</p> </li> <li>Longest Common Prefix</li> <li>Repeated DNA Sequences</li> <li>Unique Email Addresses</li> <li>Isomorphic Strings</li> <li>Rotate String</li> <li>Check if two Strings are anagrams of each other</li> <li>Group anagrams</li> <li>Sort Characters by frequency</li> <li>Maximum Nesting Depth of the Parentheses</li> <li>Roman to Integer</li> <li>Integer to Roman</li> <li>Implement Atoi</li> <li>Count With K Different Characters</li> <li>Sum of Beauty of All Substrings</li> <li>Minimum Add to Make Parentheses Valid</li> <li>Count and Say</li> <li> <p>Resulting String After Adjacent Removals</p> </li> <li> <p>Valid palindrome</p> </li> <li>Valid Palindrome II</li> <li>Find First Palindromic String in the Array</li> <li>Longest Palindrome</li> <li>Shortest Palindrome / Minimum Characters For Palindrome</li> <li>Longest palindromic substring</li> <li>Count Palindromic Subsequences</li> <li>Palindromic Substrings</li> <li>Longest Palindrome After Substring Concatenation II</li> <li>Smallest Palindromic Rearrangement I</li> <li> <p>Smallest Palindromic Rearrangement II</p> </li> <li> <p>Repeated String Match</p> </li> <li>Longest happy prefix</li> <li>Find the index of first occurrence of a word in a string</li> <li>Splitting string into descending consecutive values</li> <li>Find the Sequence of Strings Appeared on the Screen</li> <li> <p>Minimum Remove to Make Valid Parentheses</p> </li> <li> <p>Partition String</p> </li> </ul>"},{"location":"strings/#advanced","title":"Advanced","text":"<ul> <li>Rabin Karp</li> <li>Z-Function</li> <li>KMP algo / LPS(pi) array</li> <li>Boyer Moore</li> </ul>"},{"location":"tries/","title":"tries","text":""},{"location":"tries/#tries","title":"Tries","text":""},{"location":"tries/#resources","title":"Resources","text":"<ul> <li>Trie Series / Striver / take U forward</li> <li>L1 / Tries / Tries Master Class by Striver / CodeBeyond (for revise only)</li> <li>L2 / Tries - FAANG Problems / Tries Master Class by Striver (for revise only)</li> </ul>"},{"location":"tries/#general","title":"General","text":"<ul> <li>Implement Trie (Prefix Tree)</li> <li>Implement Trie - 2 (Prefix Tree)</li> <li>Longest String with All Prefixes</li> <li>Number of Distinct Substrings in a String</li> <li>Longest duplicate substring in a String</li> <li>Design Add and Search Words Data Structure</li> <li>Power Set</li> <li>Word Search 2</li> <li>Extra Characters in a String</li> </ul>"},{"location":"tries/#bit-manipulation","title":"Bit Manipulation","text":"<ul> <li>Maximum XOR of Two Numbers in an Array</li> <li>Maximum XOR of a number with items in array</li> <li>Maximum XOR With an Element From Array</li> </ul>"},{"location":"two-pointers/","title":"two pointers","text":""},{"location":"two-pointers/#two-pointers","title":"Two pointers","text":""}]}